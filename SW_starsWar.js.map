{"version":3,"sources":["utils/constants.ts","SW_starsWar.ts"],"names":[],"mappings":"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","file":"SW_starsWar.js","sourceRoot":"../src","sourcesContent":["export const BASE_URL = 'https://swapi.dev/api';\nexport const BASE_URL_IMG = 'https://starwars-visualguide.com/assets/img';\nexport const MAX_RESULT_PER_PAGE = 10;\nexport const REGEX_MATCH_URL = /\\/{1}[\\w.]*[/]?[=?\\d.\\w]*[/]?$/;","import {REGEX_MATCH_URL} from \"./utils/constants\";\n\nconst CACHE_NAME = \"starsWarCache\";\nconst PRE_CACHED_RESOURCES = [\"/\"];\n\nself.addEventListener(\"install\", (event: ExtendableEvent) => {  \n  async function preCacheResources() {\n    const cache = await caches.open(CACHE_NAME);\n    cache.addAll(PRE_CACHED_RESOURCES);\n  }\n  event.waitUntil(preCacheResources());\n});\n\nself.addEventListener(\"activate\", () => caches.delete(CACHE_NAME));\nconst fromNetwork = async(request: Request, matchURL: RequestInfo) => await fetch(request).then(async(networkResponse) => {\n  const cache = await caches.open(CACHE_NAME);\n\n  cache.put(matchURL, networkResponse.clone());\n  return networkResponse;\n}).catch(e => {\n  console.log('network Error: ', e);\n});\n\nself.addEventListener(\"fetch\", (event: FetchEvent) => {\n  async function navigateOrDisplayOfflinePage() {\n    const cache = await caches.open(CACHE_NAME);\n    const matchURL: RequestInfo = event.request.url.match(REGEX_MATCH_URL) as unknown as RequestInfo;\n    return await cache.match(matchURL).then(async (matched) => {\n      return matched || await fromNetwork(event.request, matchURL) as unknown as Promise<Response>;\n    });\n  }\n  event.respondWith(navigateOrDisplayOfflinePage());\n});\n\n"]}